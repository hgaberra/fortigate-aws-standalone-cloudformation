{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v5.0) AWS CFT to deploy a standalone FortiGate into an existing VPC",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"PublicSubnet",
						"PrivateSubnet"
					]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": [
						"InstanceType",
						"Create2ndENI",
						"CIDRForInstanceAccess",
						"KeyPair",
						"EncryptVolumes",
						"InitS3Bucket",
						"FortiOSVersion",
						"LicenseType",
						"FortiGateLicenseFile"
					]
				},
				{
					"Label": {
						"default": "FortiGate Interface IP Configuration"
					},
					"Parameters": [
						"FortiGatePublicIP",
						"FortiGatePrivateIP"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Select the VPC to use"
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/16",
			"Description": "Provide a network CIDR for the VPC",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"PublicSubnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet for PublicSubnet"
		},
		"PrivateSubnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet for PrivateSubnet"
		},
		"FortiGatePublicIP": {
			"Type": "String",
			"Default": "10.0.1.10/24",
			"Description": "Provide the IP address in CIDR form for the public interface of the FortiGate (IP from PublicSubnet)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGatePrivateIP": {
			"Type": "String",
			"Default": "10.0.2.10/24",
			"Description": "Provide the IP address in CIDR form for the private interface of the FortiGate (IP from PrivateSubnet)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"InstanceType": {
			"Type": "String",
			"Default": "c6i.xlarge",
			"Description": "Select the instance type for the FortiGates",
			"AllowedValues": [
				"c4.large",
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge",
				"c5n.large",
				"c5n.xlarge",
				"c5n.2xlarge",
				"c5n.4xlarge",
				"c5n.9xlarge",
				"c5n.18xlarge",
				"c6i.large",
				"c6i.xlarge",
				"c6i.2xlarge",
				"c6i.4xlarge",
				"c6i.8xlarge",
				"c6i.16xlarge",
				"c6i.24xlarge",
				"c6in.large",
				"c6in.xlarge",
				"c6in.2xlarge",
				"c6in.4xlarge",
				"c6in.8xlarge",
				"c6in.16xlarge",
				"c6g.large",
				"c6g.xlarge",
				"c6g.2xlarge",
				"c6g.4xlarge",
				"c6g.8xlarge",
				"c6g.16xlarge",
				"c6gn.large",
				"c6gn.xlarge",
				"c6gn.2xlarge",
				"c6gn.4xlarge",
				"c6gn.8xlarge",
				"c6gn.16xlarge",
				"c7g.large",
				"c7g.xlarge",
				"c7g.2xlarge",
				"c7g.4xlarge",
				"c7g.8xlarge",
				"c7g.16xlarge",
				"c7gn.large",
				"c7gn.xlarge",
				"c7gn.2xlarge",
				"c7gn.4xlarge",
				"c7gn.8xlarge",
				"c7gn.16xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the FortiGate instance will be accessed"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the FortiGate"
		},
		"EncryptVolumes": {
			"Type": "String",
			"Description": "Select 'true' to encrypt the FortiGate instances OS and Log volumes with your account's KMS default master key for EBS.  Otherwise select false to leave unencrypted",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"InitS3Bucket": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the Init S3 Bucket name, where your config file will be created  *** the bucket should exist in the same region as this deployment for successful bootstrapping ***"
		},
		"FortiOSVersion": {
			"Type": "String",
			"Default": "7.2.x",
			"Description": "Select the version of FortiOS to use (latest GA AMI will be used)",
			"AllowedValues": [
				"7.0.x",
				"7.2.x",
				"7.4.x"
			]
		},
		"LicenseType": {
			"Type": "String",
			"Description": "Select the license type for the FortiGate",
			"AllowedValues": [
				"PAYG",
				"BYOL"
			]
		},
		"FortiGateLicenseFile": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank for PAYG] Provide the name of the BYOL license file in the Init S3 Bucket for the FortiGate (ie fgt.lic or prefix/fgt.lic)"
		}
	},
	"Mappings": {
		"FortiOSIntelAMISearchString": {
			"6.4.x": {
				"BYOL": "FortiGate-VM64-AWS *(6.4.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"Flex": "FortiGate-VM64-AWS *(6.4.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(6.4.*)*|2wqkpek696qhdeo7lbbjncqli"
			},
			"7.0.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.0.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"Flex": "FortiGate-VM64-AWS *(7.0.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.0.*)*|2wqkpek696qhdeo7lbbjncqli"
			},
			"7.2.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.2.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"Flex": "FortiGate-VM64-AWS *(7.2.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.2.*)*|2wqkpek696qhdeo7lbbjncqli"
			},
			"7.4.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.4.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"Flex": "FortiGate-VM64-AWS *(7.4.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.4.*)*|2wqkpek696qhdeo7lbbjncqli"
			}
		},
		"FortiOSArmAMISearchString": {
			"6.4.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(6.4.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"Flex": "FortiGate-VMARM64-AWS *(6.4.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(6.4.*)*|8gc40z1w65qjt61p9ps88057n"
			},
			"7.0.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.0.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"Flex": "FortiGate-VMARM64-AWS *(7.0.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.0.*)*|8gc40z1w65qjt61p9ps88057n"
			},
			"7.2.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.2.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"Flex": "FortiGate-VMARM64-AWS *(7.2.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.2.*)*|8gc40z1w65qjt61p9ps88057n"
			},
			"7.4.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.4.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"Flex": "FortiGate-VMARM64-AWS *(7.4.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.4.*)*|8gc40z1w65qjt61p9ps88057n"
			}
		}
	},
	"Conditions": {
		"Graviton": {
			"Fn::Or": [
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c6g"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c6gn"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c7g"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c7gn"
					]
				}
			]
		}
	},
	"Resources": {
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "FGCPPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "BootStrapFromS3",
									"Effect": "Allow",
									"Action": [
										"s3:GetObject"
									],
									"Resource": "*"
								},
								{
									"Sid": "SDNConnectorFortiView",
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeInstances",
										"ec2:DescribeRegions",
										"eks:DescribeCluster",
										"eks:ListClusters",
										"inspector:DescribeFindings",
										"inspector:ListFindings"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"FortiGateSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FortigateSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow local VPC access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"Fgt": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "2",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					},
					{
						"DeviceName": "/dev/sdb",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "30",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "FgtEni0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FgtEni1"
						},
						"DeviceIndex": "1"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiGate"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"{\n",
								"\"bucket\"",
								" : \"",
								{
									"Ref": "InitS3Bucket"
								},
								"\"",
								",\n",
								"\"region\"",
								" : ",
								"\"",
								{
									"Ref": "AWS::Region"
								},
								"\"",
								",\n",
								"\"license\"",
								" : ",
								"\"",
								"/",
								{
									"Ref": "FortiGateLicenseFile"
								},
								"\"",
								",\n",
								"\"config\"",
								" : ",
								"\"",
								"/fgt1.txt\"",
								"\n",
								"}"
							]
						]
					}
				}
			}
		},
		"FgtEni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt1eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiGatePublicIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				]
			}
		},
		"FgtEni1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt1eni1"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGatePrivateIP"
								}
							]
						}
					]
				}
			}
		},
		"FgtEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"FgtEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"FgtEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "FgtEni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGatePublicIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": "FgtEIP"
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "S3AccessRole",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:PutObject",
										"ec2:DescribeImages"
									],
									"Resource": "*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"ImageFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import logging",
								"import json",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"client = boto3.client('ec2')",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        searchString = event['ResourceProperties']['SearchString']",
								"        productCode =  event['ResourceProperties']['ProductCode']",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = client.describe_images(",
								"            Filters=[{'Name': 'name', 'Values': [searchString]}, {'Name': 'product-code', 'Values': [productCode]}],",
								"            Owners=['aws-marketplace']",
								"        )",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200 and resp['Images'] != []:",
								"        ami_dict = {}",
								"        ami_list = []",
								"        for entry in resp['Images']:",
								"            key = entry['CreationDate']",
								"            ami_dict[key] = entry['ImageId']",
								"        ami_list = sorted(ami_dict, reverse = True)",
								"        logger.info('--> found latest AMI: {}, {}, {} {}'.format(ami_dict[ami_list[0]], ami_list[0], searchString, productCode))",
								"        responseData = {'ami': ami_dict[ami_list[0]]}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        logger.error('!!--> Unable to find AMI {} {} in describe_images response! {}'.format(searchString, productCode, resp))",
								"        responseData = {'msg':'Unable to find AMI {} {} in describe_images response! {}'.format(searchString, productCode,resp)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.9",
				"MemorySize": 128
			}
		},
		"RunImageFunction": {
			"Type": "Custom::ImageFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"ImageFunction",
						"Arn"
					]
				},
				"SearchString": {
					"Fn::If": [
						"Graviton",
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"|",
										{
											"Fn::FindInMap": [
												"FortiOSArmAMISearchString",
												{
													"Ref": "FortiOSVersion"
												},
												{
													"Ref": "LicenseType"
												}
											]
										}
									]
								}
							]
						},
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"|",
										{
											"Fn::FindInMap": [
												"FortiOSIntelAMISearchString",
												{
													"Ref": "FortiOSVersion"
												},
												{
													"Ref": "LicenseType"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				"ProductCode": {
					"Fn::If": [
						"Graviton",
						{
							"Fn::Select": [
								"1",
								{
									"Fn::Split": [
										"|",
										{
											"Fn::FindInMap": [
												"FortiOSArmAMISearchString",
												{
													"Ref": "FortiOSVersion"
												},
												{
													"Ref": "LicenseType"
												}
											]
										}
									]
								}
							]
						},
						{
							"Fn::Select": [
								"1",
								{
									"Fn::Split": [
										"|",
										{
											"Fn::FindInMap": [
												"FortiOSIntelAMISearchString",
												{
													"Ref": "FortiOSVersion"
												},
												{
													"Ref": "LicenseType"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import ast",
								"import boto3",
								"import cfnresponse",
								"import json",
								"import logging",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"s3 = boto3.client('s3')",
								"",
								"template = '''\\",
								"config system global",
								"set hostname {Hostname}",
								"set admintimeout 60",
								"end",
								"config system interface",
								"edit port1",
								"set alias public",
								"set mode dhcp",
								"set allowaccess ping https ssh fgfm",
								"set secondary-IP enable",
								"next",
								"edit port2",
								"set alias private",
								"set mode dhcp",
								"set defaultgw disable",
								"set allowaccess ping https ssh",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"end",
								"config router static",
								"edit 1",
								"set dst {VPCCIDR}",
								"set device port2",
								"set dynamic-gateway enable",
								"next",
								"end",
								"config firewall policy",
								"edit 1",
								"set name outbound-all",
								"set srcintf port2",
								"set dstintf port1",
								"set srcaddr all",
								"set dstaddr all",
								"set action accept",
								"set schedule always",
								"set service ALL",
								"set logtraffic all",
								"set nat enable",
								"next",
								"end",
								"config system sdn-connector",
								"edit aws-instance-role",
								"set status enable",
								"set type aws",
								"set use-metadata-iam enable",
								"next",
								"end\\",
								"'''",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        dict1 = ast.literal_eval(event['ResourceProperties']['FGT1Info'])",
								"        fgt1_conf = template.format(**dict1)",
								"        fgt1_result = False",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = s3.put_object(Body=fgt1_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgt1.txt')",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"        return None",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        fgt1_result = True",
								"        logger.info('<-- s3 put_object fgt1.txt successful')",
								"",
								"    if fgt1_result is True:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.9",
				"MemorySize": 128
			}
		},
		"RunInitFunction": {
			"Type": "Custom::InitFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"FGT1Info": {
					"Fn::Join": [
						"",
						[
							"{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'Hostname':'",
							{
								"Fn::Join": [
									"",
									[
										{
											"Ref": "AWS::StackName"
										},
										"-FortiGate"
									]
								]
							},
							"'",
							"}"
						]
					]
				}
			}
		}
	},
	"Outputs": {
		"Username": {
			"Value": "admin",
			"Description": "Username for the Fortigates"
		},
		"Password": {
			"Value": {
				"Ref": "Fgt"
			},
			"Description": "Initial password for the FortiGate"
		},
		"FortiGateLoginURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Ref": "FgtEIP"
						}
					]
				]
			},
			"Description": "Login URL for the Public interface of the FortiGate"
		}
	}
}